{"posts":[{"title":"CF_1155D","text":"题目链接CF1155D 题目大意给定一个长度为 $n$ 的序列，选求出所有子序列的和，所有子序列可以选择是否乘以 $x$ ，求出其中的最大值。 题目分析官方的DP题解没看懂，学习的评论里的一个解法。 由于 $n \\le 3 \\times 10^5$ ，所以时间复杂度需要控制在 $O(nlogn)$ 。 此解法时间复杂度为 $O(n)$ 。 区间问题，考虑使用前缀和。 首先求出 $sum[i]$ ：$a[1 \\sim i]$ 的前缀和；$L[i]$ ：以 $i$ 结尾的子序列的最大值；$R[i]$：以 $i$ 开头的子序列的最大值。 若将 $[l,r]$ 区间扩大 $x$ 倍： 答案为：$L[l - 1] + x \\times (sum[r] - sum[l - 1]) + R[r + 1]$ 。 可写为：$(R[r + 1] + x \\times sum[r]) + (L[l-1] - x \\times sum[l-1])$ 。 那么枚举所有区间即可。 规定 $(R[r + 1] + x \\times sum[r])$ 为第一项，$(L[l-1] - x \\times sum[l-1])$ 为第二项。 所以，做法是枚举 $r$ ，确定第一项，枚举过程中求出第二项的最大值。 下面分析一下关键代码： 12345LL res = 0, best = 0;for (int i = 1; i &lt;= n; i ++ ) { res = max(res, max(L[i], x * s[i] + R[i + 1] + best)); best = max(best, L[i] - x * s[i]);} $res$ ：最终答案，$best$ ：第一项的最大值。 这里需要注意 $res$ 还需要和 $L[i]$ 取一个最大值，因为区间可以不进行扩大 $x$ 倍的操作。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;sstream&gt;#include &lt;numeric&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;stack&gt;#include &lt;deque&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;set&gt;#include &lt;map&gt;using namespace std;typedef long long LL;const int N = 3e5 + 10;int n;LL x, a[N], s[N], L[N], R[N];void solve() { cin &gt;&gt; n &gt;&gt; x; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; a[i]; for (int i = 1; i &lt;= n; i ++ ) s[i] = s[i - 1] + a[i]; LL smin = 0; for (int i = 1; i &lt;= n; i ++ ) { smin = min(smin, s[i]); L[i] = max(0LL, s[i] - smin); } LL smax = s[n]; for (int i = n; i &gt;= 1; i -- ) { smax = max(smax, s[i]); R[i] = max(0LL, smax - s[i - 1]); } LL res = 0, best = 0; for (int i = 1; i &lt;= n; i ++ ) { res = max(res, max(L[i], x * s[i] + R[i + 1] + best)); best = max(best, L[i] - x * s[i]); } cout &lt;&lt; res &lt;&lt; '\\n';}int main() { ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); solve(); return 0;}","link":"/Blog.github.io/2023/05/07/CF-1155D/"},{"title":"Gym-101981K","text":"题目链接题目大意给一个矩阵， $0$ 代表墙不可进入，$1$ 代表空房间可以进入。 初始每个 $1$ 上有一个袋鼠。 每次可以对所有袋鼠进行上下左右的移动操作。 输出将所有袋鼠移动到一起的方案。 题目分析算法：随机化 代码1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;sstream&gt;#include &lt;numeric&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;stack&gt;#include &lt;deque&gt;#include &lt;queue&gt;#include &lt;cmath&gt;#include &lt;set&gt;#include &lt;map&gt;using namespace std;typedef long long LL;const int N = 30;int n, m;char g[N][N];void solve() { cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; n; i ++ ) cin &gt;&gt; g[i]; char str[4] = {'L', 'R', 'U', 'D'}; for (int i = 0; i &lt; 4; i ++ ) for (int j = 1; j &lt;= 20; j ++ ) cout &lt;&lt; str[i]; srand(time(0)); for (int i = 1; i &lt;= 49920; i ++ ) { int x = rand() % 4; cout &lt;&lt; str[x]; }}int main() { ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); solve(); return 0;}","link":"/Blog.github.io/2023/05/10/Gym-101981K/"},{"title":"使用Github和Hexo搭建静态博客","text":"参考文章 参考文章1 参考文章2 安装和配置Node.js参考文章 安装和配置Git 生成SSH Keys 1ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; 测试ssh是否绑定成功 1ssh -T git@github.com 第一次执行命令，需要输入一次yes。 本地创建和访问博客 创建一个名为Blog的文件夹，在文件夹内部使用Git Bash Here 初始化hexo 1hexo init 生成本地hexo页面 1hexo s 访问 打开本地服务器 1http://localhost:4000/ 上传到Github 修改_config.yml 1234567# 第一步，修改urlurl: https://c210809.github.io/Blog.github.io/# 第二步，修改deploydeploy: type: git repository: 你的github地址 branch: main 安装hexo-deployer-git自动部署发布工具 1npm install hexo-deployer-git --save 生成页面 1hexo g 本地文件上传到Github上 1hexo d 如果出现网络错误，多次尝试。 配置添加标签页面 先进入主题文件夹下，在主题配置文件中修改配置文件（_config.yml） 添加标签页面。 123456789menu: home: / || fa fa-home #about: /about/ || fa fa-user tags: /tags/ || fa fa-tags # 将这里的注释取消 #categories: /categories/ || fa fa-th archives: /archives/ || fa fa-archive #schedule: /schedule/ || fa fa-calendar #sitemap: /sitemap.xml || fa fa-sitemap #commonweal: /404/ || fa fa-heartbeat 生成对应的标签文件夹 1hexo new page &quot;tags&quot; 会在source文件夹中生成一个tags文件夹，在tags文件夹中生成一个index.md文件。 修改index.md文件 添加相对应的type。 123title: 标签date: 2023-03-24 21:06:40type: &quot;tags&quot; # 添加这一行","link":"/Blog.github.io/2023/03/24/Github%E6%90%AD%E5%8D%9A%E5%AE%A2/"},{"title":"Hexo_Icarus支持latex数学方法","text":"$Icarus$ 主题默认支持了 $MathJax$ 插件渲染数学公式，只需要修改主题配置文件使能就可以直接使用。 具体步骤： 打开配置文件 _config.icarus.yml Ctrl + F 搜索 mathjax 将其设置为 true 参考文章： Hexo Icarus 支持Latex数学公式","link":"/Blog.github.io/2023/05/08/Hexo-Icarus%E6%94%AF%E6%8C%81latex%E6%95%B0%E5%AD%A6%E6%96%B9%E6%B3%95/"},{"title":"修改gitbash字体大小","text":"步骤： 随便打开一个git bash 鼠标右键顶框，点击 Options... 点击右方的 Text 点击 Font 右边的 select... 设置合适的字体大小 参考文章： 修改git bash字体样式（保姆级图文）","link":"/Blog.github.io/2023/05/08/%E4%BF%AE%E6%94%B9gitbash%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/"},{"title":"Hello World","text":"Test 123456789#include &lt;iostream&gt;using namespace std;int main() { int a, b; cin &gt;&gt; a &gt;&gt; b; cout &lt;&lt; a + b &lt;&lt; endl; return 0;}","link":"/Blog.github.io/2023/03/24/hello-world/"},{"title":"解决gitbash中文乱码问题","text":"步骤： 随便打开一个git bash 鼠标右键顶框，点击 Options... Locale设置为 zh-CN Character set 设置为 UTF-8 参考文章： Git Bash终端中文输出显示乱码解决方案","link":"/Blog.github.io/2023/05/08/%E8%A7%A3%E5%86%B3gitbash%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"算法","slug":"算法","link":"/Blog.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"Hexo","slug":"Hexo","link":"/Blog.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","link":"/Blog.github.io/tags/Github/"},{"name":"Git","slug":"Git","link":"/Blog.github.io/tags/Git/"}],"categories":[],"pages":[{"title":"标签","text":"","link":"/Blog.github.io/tags/index.html"}]}