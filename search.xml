<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CF_1155D</title>
    <url>/Blog.github.io/2023/05/07/CF-1155D/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://vjudge.net/problem/CodeForces-1155D#author=0">CF1155D</a></p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个长度为 $n$ 的序列，选求出所有子序列的和，所有子序列可以选择是否乘以 $x$ ，求出其中的最大值。</p>
<span id="more"></span>



<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>官方的DP题解没看懂，学习的评论里的一个<a href="https://codeforces.com/contest/1155/submission/53150702">解法</a>。</p>
<p>由于 $n \le 3 \times 10^5$ ，所以时间复杂度需要控制在 $O(nlogn)$ 。</p>
<p>此解法时间复杂度为 $O(n)$ 。</p>
<p>区间问题，考虑使用<strong>前缀和</strong>。</p>
<p>首先求出 $sum[i]$ ：$a[1 \sim i]$ 的前缀和；$L[i]$ ：以 $i$ 结尾的子序列的最大值；$R[i]$：以 $i$ 开头的子序列的最大值。</p>
<p>若将 $[l,r]$ 区间扩大 $x$ 倍：</p>
<ul>
<li>答案为：$L[l - 1] + x \times (sum[r] - sum[l - 1]) + R[r + 1]$ 。</li>
<li>可写为：$(R[r + 1] + x \times sum[r]) + (L[l-1] - x \times sum[l-1])$ 。</li>
</ul>
<p>那么枚举所有区间即可。</p>
<p>规定 $(R[r + 1] + x \times sum[r])$ 为第一项，$(L[l-1] - x \times sum[l-1])$ 为第二项。</p>
<p>所以，做法是枚举 $r$ ，确定第一项，枚举过程中求出第二项的最大值。</p>
<hr>
<p>下面分析一下关键代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LL res = <span class="number">0</span>, best = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">    res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(L[i], x * s[i] + R[i + <span class="number">1</span>] + best));</span><br><span class="line">    best = <span class="built_in">max</span>(best, L[i] - x * s[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$res$ ：最终答案，$best$ ：第一项的最大值。</p>
<p>这里需要注意 $res$ 还需要和 $L[i]$ 取一个最大值，因为区间可以不进行扩大 $x$ 倍的操作。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL x, a[N], s[N], L[N], R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; a[i];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">	LL smin = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">		smin = <span class="built_in">min</span>(smin, s[i]);</span><br><span class="line">		L[i] = <span class="built_in">max</span>(<span class="number">0LL</span>, s[i] - smin);</span><br><span class="line">	&#125;</span><br><span class="line">	LL smax = s[n];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i -- ) &#123;</span><br><span class="line">		smax = <span class="built_in">max</span>(smax, s[i]);</span><br><span class="line">		R[i] = <span class="built_in">max</span>(<span class="number">0LL</span>, smax - s[i - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	LL res = <span class="number">0</span>, best = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">		res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(L[i], x * s[i] + R[i + <span class="number">1</span>] + best));</span><br><span class="line">		best = <span class="built_in">max</span>(best, L[i] - x * s[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>Gym-101981K</title>
    <url>/Blog.github.io/2023/05/10/Gym-101981K/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><strong>题目链接</strong></h3><p><a href="https://vjudge.net/problem/Gym-101981K">Kangaroo Puzzle</a></p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个矩阵， $0$ 代表墙不可进入，$1$ 代表空房间可以进入。</p>
<p>初始每个 $1$ 上有一个袋鼠。</p>
<p>每次可以对所有袋鼠进行上下左右的移动操作。</p>
<p>输出将所有袋鼠移动到一起的方案。</p>
<span id="more"></span>



<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a><strong>题目分析</strong></h3><p>算法：<strong>随机化</strong></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; g[i];</span><br><span class="line">	<span class="type">char</span> str[<span class="number">4</span>] = &#123;<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ ) </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; j ++ )</span><br><span class="line">			cout &lt;&lt; str[i];</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">49920</span>; i ++ ) &#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">rand</span>() % <span class="number">4</span>;</span><br><span class="line">		cout &lt;&lt; str[x];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
        <tag>随机化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github和Hexo搭建静态博客</title>
    <url>/Blog.github.io/2023/03/24/Github%E6%90%AD%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/60578464">参考文章1</a></p>
<p><a href="https://wushishu.xyz/post/be8880ea.html">参考文章2</a></p>
</blockquote>
<h3 id="安装和配置Node-js"><a href="#安装和配置Node-js" class="headerlink" title="安装和配置Node.js"></a>安装和配置<code>Node.js</code></h3><p><a href="https://blog.csdn.net/weixin_52799373/article/details/123840137">参考文章</a></p>
<span id="more"></span>

<h3 id="安装和配置Git"><a href="#安装和配置Git" class="headerlink" title="安装和配置Git"></a>安装和配置<code>Git</code></h3><ol>
<li>生成<code>SSH Keys</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试<code>ssh</code>是否绑定成功</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>第一次执行命令，需要输入一次<code>yes</code>。</p>
<h3 id="本地创建和访问博客"><a href="#本地创建和访问博客" class="headerlink" title="本地创建和访问博客"></a>本地创建和访问博客</h3><ol>
<li>创建一个名为<code>Blog</code>的文件夹，在文件夹内部使用<code>Git Bash Here</code></li>
<li>初始化<code>hexo</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>生成本地<code>hexo</code>页面</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>访问</li>
</ol>
<p>打开本地服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>

<h3 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到<code>Github</code></h3><ol>
<li>修改<code>_config.yml</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一步，修改url</span><br><span class="line">url: https://c210809.github.io/Blog.github.io/</span><br><span class="line"># 第二步，修改deploy</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 你的github地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装<code>hexo-deployer-git</code>自动部署发布工具</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>生成页面</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>本地文件上传到<code>Github</code>上</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>如果出现网络错误，多次尝试。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h4><ol>
<li>先进入主题文件夹下，在主题配置文件中修改配置文件（<code>_config.yml</code>）</li>
</ol>
<p>添加标签页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags  # 将这里的注释取消</span><br><span class="line">  #categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>生成对应的标签文件夹</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>会在<code>source</code>文件夹中生成一个<code>tags</code>文件夹，在<code>tags</code>文件夹中生成一个<code>index.md</code>文件。</p>
<ol start="3">
<li>修改<code>index.md</code>文件</li>
</ol>
<p>添加相对应的<code>type</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2023-03-24 21:06:40</span><br><span class="line">type: &quot;tags&quot;  # 添加这一行</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo_Icarus支持latex数学方法</title>
    <url>/Blog.github.io/2023/05/08/Hexo-Icarus%E6%94%AF%E6%8C%81latex%E6%95%B0%E5%AD%A6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>$Icarus$ 主题默认支持了 $MathJax$ 插件渲染数学公式，只需要修改主题配置文件使能就可以直接使用。</p>
<p>具体步骤：</p>
<ol>
<li>打开配置文件 <code>_config.icarus.yml</code> </li>
<li><code>Ctrl + F</code> 搜索 <code>mathjax</code> </li>
<li>将其设置为 <code>true</code></li>
</ol>
<p>参考文章：</p>
<ul>
<li><a href="https://kysonlok.github.io/2020/06/11/Hexo-Icarus-%E6%94%AF%E6%8C%81Latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/">Hexo Icarus 支持Latex数学公式</a></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用自定义模板创建文章</title>
    <url>/Blog.github.io/2023/05/12/Hexo%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a><strong>原因</strong></h3><p>每次写题解都要写一些重复的东西，于是学习了一下如何自定义模板。</p>
<span id="more"></span>



<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a><strong>具体步骤</strong></h3><ol>
<li>进入<code>scaffolds</code>文件夹</li>
<li>创建模板<code>t</code></li>
<li>添加属性<code>layout: t</code></li>
<li>可以使用<code>hexo new t &quot;article_name&quot;</code>来创建文章</li>
</ol>
<p>注意：模板名称和<code>layout</code>属性要使用小写字母。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>manacher算法模板题</title>
    <url>/Blog.github.io/2023/05/11/manacher%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><strong>题目链接</strong></h3><p><a href="luogu.com.cn/problem/P3805">P3805 【模板】manacher 算法</a></p>
<span id="more"></span>



<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h3><p>算法：$manacher$</p>
<p>时间复杂度：$O(n)$</p>
<p>作用：求出以每个字符为中心的最长回文半径（包含中心）。</p>
<hr>
<p>需要额外的一个两倍长度字符数组，和一个储存半径长度的数组。</p>
<p>具体流程：</p>
<p>首先，将字符串首添加一个$（原串未出现即可）。</p>
<p>再将每个字符前添加一个#。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(a + <span class="number">1</span>), k = <span class="number">0</span>;</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&#x27;$&#x27;</span>, s[ ++ k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) s[ ++ k] = a[i], s[ ++ k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">n = k;</span><br></pre></td></tr></table></figure>

<p>然后处理半径长度数组。</p>
<p>如果当前点 $i$ 在 $[l,r]$ 盒子中，首先找到对应点，使用对应点的半径进行扩展。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_d</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	d[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, l, r = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt;= r) d[i] = <span class="built_in">min</span>(d[r - i + l], r - i + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (s[i - d[i]] == s[i + d[i]]) d[i] ++ ;</span><br><span class="line">		<span class="keyword">if</span> (i + d[i] - <span class="number">1</span> &gt; r) l = i - d[i] + <span class="number">1</span>, r = i + d[i] - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e7</span>;</span><br><span class="line"><span class="type">char</span> s[N], a[N];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_d</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	d[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, l, r = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt;= r) d[i] = <span class="built_in">min</span>(d[r - i + l], r - i + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (s[i - d[i]] == s[i + d[i]]) d[i] ++ ;</span><br><span class="line">		<span class="keyword">if</span> (i + d[i] - <span class="number">1</span> &gt; r) l = i - d[i] + <span class="number">1</span>, r = i + d[i] - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> n = <span class="built_in">strlen</span>(a + <span class="number">1</span>), k = <span class="number">0</span>;</span><br><span class="line">	s[<span class="number">0</span>] = <span class="string">&#x27;$&#x27;</span>, s[ ++ k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) s[ ++ k] = a[i], s[ ++ k] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	n = k;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">get_d</span>(s, n);</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) res = <span class="built_in">max</span>(res, d[i]);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
        <tag>manacher</tag>
      </tags>
  </entry>
  <entry>
    <title>修改gitbash字体大小</title>
    <url>/Blog.github.io/2023/05/08/%E4%BF%AE%E6%94%B9gitbash%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<p>步骤：</p>
<ol>
<li>随便打开一个git bash</li>
<li>鼠标右键顶框，点击 <code>Options...</code></li>
<li>点击右方的 <code>Text</code></li>
<li>点击 <code>Font</code> 右边的 <code>select...</code> </li>
<li>设置合适的字体大小</li>
</ol>
<p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/u011027547/article/details/121464105">修改git bash字体样式（保姆级图文）</a></li>
</ul>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/Blog.github.io/2023/03/24/hello-world/</url>
    <content><![CDATA[<p>Test</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>解决gitbash中文乱码问题</title>
    <url>/Blog.github.io/2023/05/08/%E8%A7%A3%E5%86%B3gitbash%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>步骤：</p>
<ol>
<li>随便打开一个git bash</li>
<li>鼠标右键顶框，点击 <code>Options...</code></li>
<li><code>Locale</code>设置为 <code>zh-CN</code></li>
<li><code>Character set</code> 设置为 <code>UTF-8</code></li>
</ol>
<p>参考文章：</p>
<ul>
<li><a href="https://www.cnblogs.com/sdlz/p/13023342.html"><a href="https://www.cnblogs.com/sdlz/p/13023342.html">Git Bash终端中文输出显示乱码解决方案 </a></a></li>
</ul>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
